public class Solution {
    private static final int MOD = 1000000007;
    public int solve(int[] A) {
        return mergeSort(A, 0, A.length-1);
    }

    private int mergeSort(int[] A, int low, int high){
        if(low >= high){
            return 0;
        }

        int mid = low + (high - low )/2;
        int inversions  = 0;
        inversions += mergeSort(A, low, mid);
        inversions += mergeSort(A, mid+1, high);
        inversions += merge(A, low, mid, high);
        return inversions % MOD;
    }

    private int merge(int[] A, int low, int mid, int high){
        int[] temp = new int[high - low +1];
        int inversions = 0;
        int i = low, j = mid+1, k = 0;

        while(i <= mid && j <= high){
            if(A[i] <= A[j]){
                temp[k++] = A[i++];
            }else{
                temp[k++] = A[j++];
                inversions = (inversions +(mid -i+1))%MOD;
            }
        }
        while(i <= mid){
            temp[k++] = A[i++];
        }
        while(j <= high){
            temp[k++] = A[j++];
        }
        for(int idx =0; idx < temp.length; idx++){
            A[low + idx] = temp[idx];
        }
        return inversions;
    }
}
